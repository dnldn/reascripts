-- Script generated by Lokasenna's GUI Builder

--Global for script; declaring exterior state name.
state = "AUBIO_ONSET"

---------------------------------------------------------------------------------------------------------------------------

--Send values to exterior state.
function toExtState()
  
  lowerLim = GUI.elms.lowerLim.retval
  method = GUI.elms.method.retval
  interval = GUI.elms.interval.retval
  hop = GUI.elms.hop.retval
  
  --threshold = GUI.elms.threshold.retval
  --detections = GUI.elms.detections.handles.1.retval --this isn't working because it doesn't populate value until mouse released
  
  --##############################################################################
  --Deprecated code below; setting bottom threshold by volume analysis didn't prove useful, because the effective peak dB difference
  --between peaks was too narrow. Ditto RMS and LUFS.
  --[[
  if GUI.elms.threshold.retval == 1 then
      PEAKBOOL = false RMSBOOL = false LUFSBOOL = false threshNum = 1
  elseif GUI.elms.threshold.retval == 2 then
      PEAKBOOL = true RMSBOOL = false LUFSBOOL = false threshNum = 2
  elseif GUI.elms.threshold.retval == 3 then
      PEAKBOOL = false RMSBOOL = true LUFSBOOL = false threshNum = 3
  elseif GUI.elms.threshold.retval == 4 then
      PEAKBOOL = false RMSBOOL = false LUFSBOOL = true threshNum = 4
  end
  ]]
  --##############################################################################
  
  
  reaper.SetExtState(state,'lowerLim', tostring(lowerLim), true)
  reaper.SetExtState(state,'method', tostring(method), true)
  reaper.SetExtState(state,'interval', tostring(interval), true)
  reaper.SetExtState(state,'hop size', tostring(hop), true)
  
  --Deprecated:
  --reaper.SetExtState(state,'threshold', tostring(threshold), true)
  --reaper.SetExtState(state,'threshNum', tostring(threshNum), true)
  --reaper.SetExtState(state,'detections', tostring(detections), true)
  
  --##############################################################################
  --[[
  reaper.SetExtState(state,'peak', tostring(PEAKBOOL), true) --deprecated
  reaper.SetExtState(state,'rms', tostring(RMSBOOL), true) --deprecated
  reaper.SetExtState(state,'lufs', tostring(LUFSBOOL), true) --deprecated
  ]]
  --##############################################################################
  reaper.defer(function() end) --deferring function; may need to nest this function in another because only one can be deferred by gui.func
end

---------------------------------------------------------------------------------------------------------------------------
--Get value from exterior state.

function fromExtState(key, nilallowed)
    if nilallowed == nil then nilallowed = false end
    
    local val = reaper.GetExtState(state,key)
    if nilallowed then
      if val == '' then
        val = nil
      end
    end
    return val
end

---------------------------------------------------------------------------------------------------------------------------
--Open URL when help button pressed.

function openUrl()
  local url = reaper.GetResourcePath().."//scripts//DNLDN//Aubio Manual.txt" --can be a website or a local file it seems
  local OS = reaper.GetOS()
  if OS == "OSX32" or OS == "OSX64" then
    os.execute('open "" "' .. url .. '"')
  else
    os.execute('start "" "' .. url .. '"')
  end
end

---------------------------------------------------------------------------------------------------------------------------

--Require lokasenna gui libary block. Should work it later to include something a little more user-proof.
local lib_path = reaper.GetExtState("Lokasenna_GUI", "lib_path_v2")
if not lib_path or lib_path == "" then
    reaper.MB("Couldn't load the Lokasenna_GUI library. Please install 'Lokasenna's GUI library v2 for Lua', available on ReaPack, then run the 'Set Lokasenna_GUI v2 library path.lua' script in your Action List.", "Whoops!", 0)
    return
end
loadfile(lib_path .. "Core.lua")()

---------------------------------------------------------------------------------------------------------------------------

--Restore default settings. Note: aubio documentation says default minimum offset length is 20 ms; appears to actually be 50 ms.
function defaultSettings()
    GUI.Val("method", "High-Frequency Content")
    --##########
    --Deprecated code below.
    GUI.Val("threshold", "None")
    --##########
    GUI.Val("interval", "50") --get value from exterior state for second argument
    GUI.Val("lowerLim", "-70") --get value from exterior state for second argument
    GUI.Val("hop", "256") --get value from exterior state for second argument
end

---------------------------------------------------------------------------------------------------------------------------

--##############################################################################
--Deprecated code below: setting threshold by volume analysis yielded unreliable results.
--[[
function onThresholdChange()

    --Stores updated value to y.
    local function innerFunc()
        local y = GUI.elms.threshold.retval
        return y
    end

    --Default y to value from exterior state to avoid bugs.
      if y == nil then y = tonumber(fromExtState('threshold', true)) end
 
    --Declare current threshold setting as "X".
    x = GUI.elms.threshold.retval
    
    if x ~= y then
        --If method changes to "none," default value to -70. Otherwise default value to -10.
        if GUI.elms.threshold.retval == 1 then 
            GUI.Val("lowerLim", "-70")
        elseif GUI.elms.threshold.retval == 2 or GUI.elms.threshold.retval == 3 or GUI.elms.threshold.retval == 4 then
            GUI.Val("lowerLim", "-10")
        end
    end
    
    y = innerFunc()
    
    
    reaper.defer(function() end)

end
]]
--##############################################################################

---------------------------------------------------------------------------------------------------------------------------


GUI.req("Classes/Class - Frame.lua")()
GUI.req("Classes/Class - Label.lua")()
GUI.req("Classes/Class - Button.lua")()
GUI.req("Classes/Class - Textbox.lua")()
GUI.req("Classes/Class - Menubox.lua")()
GUI.req("Classes/Class - Window.lua")()
GUI.req("Classes/Class - Slider.lua")()



-- If any of the requested libraries weren't found, abort the script.
if missing_lib then return 0 end



GUI.name = "New script GUI"
GUI.x, GUI.y, GUI.w, GUI.h = 0, 0, 256, 200--256 --DJFIAJDSFPOIJADFOPIJ EDIT HERE
GUI.anchor, GUI.corner = "mouse", "C"


GUI.New("interval", "Textbox", {
    z = 11,
    x = 166,
    y = 112,
    w = 60,
    h = 20,
    caption = "Interval (ms): ",
    cap_pos = "left",
    font_a = 3,
    font_b = "monospace",
    color = "txt",
    bg = "wnd_bg",
    shadow = true,
    pad = 4,
    undo_limit = 20
})

GUI.Val("interval", fromExtState('interval', true))

--Didn't bother implementing. Would arbitrarily reduce detections based on a coefficient; didn't seem useful.
--[[
GUI.New("detections", "Slider", {
    z = 11,
    x = 96,
    y = 170,--64,
    w = 96,
    caption = "Detections (lower = more)",
    min = 0,
    max = 0.9,
    defaults = {300},
    inc = 0.001,
    dir = "h",
    font_a = 3,
    font_b = 4,
    col_txt = "txt",
    col_fill = "elm_fill",
    bg = "wnd_bg",
    show_handles = true,
    show_values = true,
    cap_x = 0,
    cap_y = 0
})
]]

GUI.New("lowerLim", "Textbox", {
    z = 11,
    x = 166,
    y = 80,
    w = 60,
    h = 20,
    caption = "Gate threshold (dB): ",
    cap_pos = "left",
    font_a = 3,
    font_b = "monospace",
    color = "txt",
    bg = "wnd_bg",
    shadow = true,
    pad = 4,
    undo_limit = 20
})

GUI.Val("lowerLim", fromExtState('lowerLim', true))

GUI.New("hop", "Textbox", {
    z = 11,
    x = 166,
    y = 48,--144,
    w = 60,
    h = 20,
    caption = "Hop size: ",
    cap_pos = "left",
    font_a = 3,
    font_b = "monospace",
    color = "txt",
    bg = "wnd_bg",
    shadow = true,
    pad = 4,
    undo_limit = 20
})

GUI.Val("hop", fromExtState('hop size', true))

GUI.New("update", "Button", {
    z = 11,
    x = 176,
    y = 156,--208,--192,
    w = 48,
    h = 24,
    caption = "Update",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame",
    func = toExtState
})

GUI.New("Help", "Button", {
    z = 11,
    x = 104,
    y = 156,--208,--192,
    w = 48,
    h = 24,
    caption = "Help",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame",
    func = openUrl
})

GUI.New("method", "Menubox", {
    z = 11,
    x = 96,
    y = 16,
    w = 128,
    h = 20,
    caption = "Method: ",
    optarray = {"!High-Frequency Content", " Energy", " Phase", " Complex", " Spectral Difference", " Spectral Flux", " Kulback-Liebler", " Modified Kulback-Liebler"},
    retval = 1,
    font_a = 3,
    font_b = 4,
    col_txt = "txt",
    col_cap = "txt",
    bg = "wnd_bg",
    pad = 4,
    noarrow = false,
    align = 0
})

GUI.Val("method", fromExtState('method', true))

GUI.New("Default", "Button", {
    z = 11,
    x = 32,
    y = 156,--208,--192,
    w = 48,
    h = 24,
    caption = "Default",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame",
    func = defaultSettings
})

--##############################################################################
--Deprecated code below: setting threshold by absolute volume analysis was unreliable.
--[[
GUI.New("threshold", "Menubox", {
    z = 11,
    x = 96,
    y = 48,
    w = 128,
    h = 20,
    caption = "Threshold by: ",
    optarray = {"!None", " Peak", " RMS", " LUFS"},
    retval = 1,
    font_a = 3,
    font_b = 4,
    col_txt = "txt",
    col_cap = "txt",
    bg = "wnd_bg",
    pad = 4,
    noarrow = false,
    align = 0
})

GUI.Val("threshold", fromExtState('threshNum', true)) --set by index, not string. ]]
--##############################################################################

GUI.New("MainFrame", "Frame", {
    z = 13.0,
    x = 0,
    y = 0,
    w = 256,
    h = 256,
    shadow = false,
    fill = false,
    color = "elm_frame",
    bg = "wnd_bg",
    round = 0,
    text = "",
    txt_indent = 0,
    txt_pad = 0,
    pad = 4,
    font = 4,
    col_txt = "txt"
})

--Blanks out subtitle on bottom; gets in the way of the buttons otherwise. No discredit to Lokasenna- thank you so much for the script!!
GUI.Draw_Version = function () end

--##############################################################################
--Deprecated code below.
--This needs to be here to tie this function ending to the GUI script ending.
--GUI.func = onThresholdChange
--##############################################################################
GUI.func = toExtState

--Sets title name.
GUI.name = "DNLDN: Aubio Transient Settings"

GUI.Init()
GUI.Main()
